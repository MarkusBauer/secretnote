name: Build

on:
  push:
    #branches: [ master ]
    tags:
      - 'v*'
  #pull_request:
    #branches: [ master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      name: Checkout
    
    # Setup software (NodeJS, Docker)
    - name: Use Node.js 14.x
      uses: actions/setup-node@v1
      with:
        node-version: 14.x
    - name: Use Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to DockerHub
      uses: docker/login-action@v1 
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    # Caches for npm / cargo / rustup
    - name: Cache Node Modules
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-npm-
    - name: Cache Rust Dependencies
      uses: actions/cache@v2
      with:
        path: target
        key: ${{ runner.os }}-rust-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.OS }}-rust-
    - name: Cache RustUp Toolchains
      uses: actions/cache@v2
      with:
        path: ~/.rustup
        key: ${{ runner.os }}-rustup
    - name: Cache Cargo
      uses: actions/cache@v2
      with:
        path: ~/.cargo
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.OS }}-cargo-

    # Build frontend / Angular app
    - run: cd secretnote-fe && npm ci
      name: Install Frontend Dependencies
    - run: cd secretnote-fe && npm run build
      name: Build Frontend
    
    # Build server / Rust part
    - name: Install Rust Build Dependencies
      run: sudo apt-get install -y musl-tools gcc-mingw-w64-x86-64
    - name: RustUp
      run: rustup target add x86_64-unknown-linux-musl && rustup target add x86_64-pc-windows-gnu
    - name: Build Server (Linux/amd64)
      run: cargo build --release --target x86_64-unknown-linux-musl
    - name: Build Server (Windows/amd64)
      run: cargo build --release --target x86_64-pc-windows-gnu
      
    # Upload build results (Linux)
    - run: |
        cp target/x86_64-unknown-linux-musl/release/secretnote ./
        cp target/x86_64-unknown-linux-musl/release/secretnote-statistics-exporter ./
        strip ./secretnote
        strip ./secretnote-statistics-exporter
        echo '/secretnote-fe/node_modules' >> .dockerignore
      name: "Prepare (Linux/amd64)"
    - name: Upload (Linux/amd64)
      uses: actions/upload-artifact@v2
      with:
        name: "SecretNote for Linux amd64"
        path: |
          ./fe
          ./secretnote
          ./secretnote-statistics-exporter
        retention-days: 365

    # Docker
    - name: Build and push docker image (Linux/amd64)
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./CI.Dockerfile
        platforms: linux/amd64
        push: true
        tags: markusbauer/secretnote:latest

    # Upload build results (Windows)
    - run: cp target/x86_64-pc-windows-gnu/release/secretnote.exe ./
      name: "Prepare (Windows/x64)"
    - name: Upload
      uses: actions/upload-artifact@v2
      with:
        name: "SecretNote for Windows x64"
        path: |
          ./fe
          ./secretnote.exe
        retention-days: 365

    # Create a release
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.1.4
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        # The name of the tag. This should come from the webhook payload, `github.GITHUB_REF` when a user pushes a new tag
        tag_name: ${{ github.ref }}
        # The name of the release. For example, `Release v1.0.1`
        release_name: Release ${{ github.ref }}
        # Text describing the contents of the tag.
        body: Automatic release
        # Path to file with information about the tag.
        #body_path: # optional
        # `true` to create a draft (unpublished) release, `false` to create a published one. Default: `false`
        draft: true
        # `true` to identify the release as a prerelease. `false` to identify the release as a full release. Default: `false`
        prerelease: false
